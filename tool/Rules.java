//-----------------------------
//Rules 
// shows simple makefile rules graphically using graphviz
//(c) H.Buchmann FHNW 2012
//$Id$
//input rules generated by gcc -MM
//rules from stdin
//-----------------------------
import java.util.Vector;
import java.io.InputStreamReader;
import java.io.StringWriter;
class Rules
{
//TODO better removal of the prefixes
 private Vector<Rule> rules=new Vector<Rule>();
 private static String quote(String s){return "\""+s+"\"";}
 private static String name(String s)
 {
  return s.replaceAll("\\..*$","");
 }
 
 class Rule
 {
  String target;
  String[] prerequisites;
  
  Rule(String r)
  {
   String[] rr=r.split("\\s*:\\s*");
   target=rr[0];
   prerequisites=rr[1].split("\\s+");
  }
  
  public String toString()
  {
   StringBuffer sb=new StringBuffer(target+":");
   for(String s:prerequisites) sb.append(" "+s);
   return sb.toString();
  }
  
  void makefile()
  {
   System.out.print(quote(target)+"->{");
   for(String s:prerequisites) System.out.print(quote(s)+" ");
   System.out.println("}");
  }
  
  void module()
  {
   String t=name(target);
   System.out.print(quote(t)+"->{");
   for(int i=1;i<prerequisites.length;++i)
   {
    String p=name(prerequisites[i]);
    if (!t.equals(p)) System.out.print(quote(name(p))+" ");
   }
   System.out.println("}");
  }
 }
  
 private static final String Prefix="(\\.\\./)+src/"; 

 private void makefile() 
 {
  System.out.println("digraph Rules {\n"+
                     "rankdir=LR;"
                    );
  for(Rule r:rules)
  {
   r.makefile();  
  }
  System.out.println("}"); 
 }
 
 private void module()
 {
  System.out.println("digraph Modules {");
  for(Rule r:rules)
  {
   r.module();  
  }
  System.out.println("}"); 
 }
 
 private void read() throws Exception
 {
  InputStreamReader src=new InputStreamReader(System.in);
  StringWriter      dst=new StringWriter();
  while(true)
  {
   int ch=src.read();
   if (ch<0) break;
   dst.write(ch);
  }
  dst.close();
  String[] rules=dst.toString().replaceAll("\\\\\\n"," ").replaceAll(Prefix,"").split("\\n+");
  for(String s:rules) 
  {
   this.rules.add(new Rule(s));
  }
 }
 
 
 private Rules() throws Exception
 {
  read();
 }
 
 public static void main(String args[]) throws Exception
 {
  if (args.length==1)
     {
      if (args[0].equals("makefile"))
         {
	  new Rules().makefile();
	  return;
	 }
      if (args[0].equals("module"))
         {
	  new Rules().module();
	  return;
	 }
     }
  System.err.println("usage Rules makefile|module");
 }
}
