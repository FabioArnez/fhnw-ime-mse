//---------------------
//Indexer
//(c) H.Buchmann FHNW 2011
//$Id$
//---------------------
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.io.File;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Vector;
import java.util.Map;
import java.util.TreeMap;

class Indexer
{
//TODO make a parameter
 static private final String   IdxHome="../../slides/hardware-related-software";
 static private final String   SrcHome="../..";
 static private final String[] PathNames= 
   {
    "sos/arm",
    "sos/arm/config",
    "sos/arm/src",
    "sos/arm/tool",
    "sos/host",
    "sos/host/config",
    "sos/host/src",
    "sos/intel",
    "sos/intel/config",
    "sos/intel/iso",
    "sos/intel/src",
    "sos/intel/tool",
    "sos/posix",
    "sos/posix/config",
    "sos/posix/src",
    "sos/src",
    "sos/tool",
    "codedemos/config",
    "codedemos/src",
    "codedemos/src/hardware",
    "codedemos/src/mem",
    "codedemos/src/mem/ram"
   };

 class Entry implements Comparable<Entry>
 {
  String name;     //of file
  Vector<String> lst;
  Entry(String name,Vector<String> lst)
  {
   this.name=name;
   this.lst=lst;
  }
  
  public int compareTo(Entry e)
  {
   return name.compareTo(e.name);
  }
 }
 
 Map<Entry,Map<String,Vector<String>>> index=new TreeMap<Entry,     // file
                                                         Map<String, //slide
							 Vector<String>>>();//page
  
 static private final File[] Path=new File[PathNames.length];
 
 static 
 {
  int i=0;
  for(String s:PathNames)
  {
   Path[i++]=new File(SrcHome+"/"+s);
  }
 }

 static private final Pattern Entry=Pattern.compile(
           "\\\\indexentry\\{(.*)\\}\\{(.*)\\}"
                                                   );
 

 Vector<String> locate(String f)
 {
  Vector<String> list=new Vector<String>();
  int i=0;
  for(File dir:Path)
  {
   File fil=new File(dir,f);
   if (fil.exists())
      {
       list.add(PathNames[i]+"/"+f);    
      }
   ++i;   
  }
  return list;
 }
 
 private void insert(String idx,Entry key,String page)
 {
  Map<String,Vector<String>> e=index.get(key);
  if (e==null)
     {
      e=new TreeMap<String,Vector<String>>();
      index.put(key,e);
     }
  Vector<String> pages=e.get(idx);
  if (pages==null)
     {
      pages=new Vector<String>();
      e.put(idx,pages);
     }
  pages.add(page);
 }
 
 
 private void index(String fil) throws Exception
 {
  String fName=IdxHome+"/"+fil+".idx";
  try
  {
   LineNumberReader src=new LineNumberReader(new FileReader(fName));
   while(true)
   {
    String li=src.readLine();
    if (li==null) break;
    Matcher m=Entry.matcher(li);
    if (m.matches())
       {
//        System.out.println(m.group(2)+"\t"+m.group(1));
        Vector<String> lst=locate(m.group(1));
	insert(fil,new Entry(m.group(1),lst),m.group(2));
       }
   }
  }
  catch(FileNotFoundException ex)
  {
   System.err.println("File '"+fil+"' not found");
  }
 }
 
 private void show()
 {
  for(Map.Entry<Entry,Map<String,Vector<String>>> me:index.entrySet())
  {
   Entry e=me.getKey();
   System.out.print(e.name+": ");
   for(Map.Entry<String,Vector<String>> ee:me.getValue().entrySet())
   {
    System.out.print(ee.getKey()+"(");
    Vector<String> pages=ee.getValue();
    for(int i=0;i<pages.size();++i)
    {
     if (i>0)System.out.print(",");
     System.out.print(pages.get(i));
    }
    System.out.print(")");
   }
   System.out.println();
   for(String f:e.lst)
   {
    System.out.println("  "+f);
   }
   System.out.println();
  }
 }
 
 private Indexer(String idxFiles[]) throws Exception
 {
  for(String fil:idxFiles)
  {
   index(fil);
  }
  show();
 }
 
 public static void main(String args[]) throws Exception
 {
  new Indexer(args); //list of idx files generated by latex
 }
}
