<?xml version="1.0" ?>

<!DOCTYPE projects PUBLIC "3e37ecfe693b31a44c434b6193405efa" 
                        "http:eo3s.hst.fhso.ch/eo3s/depend.dtd">

<projects name="Arduino-M0">
 
 <search>
  <dir name="src"/>
  <dir name="src/board/"/>
  <dir name="src/board/namespace"/>
  <dir name="src/soc/namespace"/>
  <dir name="src/namespace"/>
  <dir name="talks/uart"/>
  <dir name="talks/i2c-spi"/>
  <dir name="talks/port"/>
  <dir name="talks/adc"/>
 </search>

 <specify prjmake="${${ACTION}}">
  <spec mod="sys/boot/big-bang" type="S"/>
  <spec mod="sys/deb/deblow0" type="S"/>
  <spec mod="cpu-demo" type="S"/>
 </specify>

 <list name="minimal">
  <mod name="sys/mem/ram0"/>
  <mod name="sys/boot/big-bang"/>
  <mod name="sys/board"/>
  <mod name="sys/deb/deblow"/>
  <mod name="sys/deb/deblow0"/>
  <mod name="sys/sys"/>
  <mod name="sys/msg-1"/>
 </list>

 <list name="atomic">
  <ref id="minimal"/>
  <mod name="sys/armv6-m"/>
 </list>
 
<!-- **************************  the projects -->
 <prj name="startup-1">
  <ref id="minimal"/>
  <mod name="startup-1"/>
 </prj>

 <prj name="cpu-demo-app">
  <ref id="minimal"/>
  <mod name="cpu-demo-app"/>
 </prj>
 
 <prj name="uart-demo">
  <ref id="minimal"/>
  <mod name="uart-demo"/>
 </prj>
 
 <prj name="hardware-register-pointer">
  <ref id="minimal"/>
  <mod name="hardware-register-pointer"/>
 </prj>

 <prj name="hardware-register-extern">
  <ref id="minimal"/>
  <mod name="hardware-register-extern"/>
 </prj>
 
 <prj name="adc-random">
  <ref id="minimal"/>
  <mod name="adc-random"/>
 </prj>

 <prj name="adc-demo">
  <ref id="minimal"/>
  <mod name="adc-demo"/>
 </prj>

 <prj name="interrupt-demo-1">
   <ref id="minimal"/>
   <mod name="interrupt-demo-1"/>
 </prj>

 <prj name="interrupt-demo-2">
   <ref id="minimal"/>
   <mod name="interrupt-demo-2"/>
 </prj>

 <prj name="interrupt-demo-3">
   <ref id="minimal"/>
   <mod name="interrupt-demo-3"/>
 </prj>

 <prj name="interrupt-demo-4">
   <ref id="minimal"/>
   <mod name="interrupt-demo-4"/>
 </prj>

 <prj name="interrupt-demo-5">
   <ref id="minimal"/>
   <mod name="interrupt-demo-5"/>
 </prj>
 
 <prj name="interrupt-demo-6">
   <ref id="minimal"/>
   <mod name="interrupt-demo-6"/>
 </prj>
 

 <prj name="interrupt-nvic-demo-1">
   <ref id="minimal"/>
   <mod name="interrupt-nvic-demo-1"/>
 </prj>
 
 <prj name="interrupt-nvic-demo-2">
   <ref id="minimal"/>
   <mod name="interrupt-nvic-demo-2"/>
 </prj>

 <prj name="interrupt-nvic-demo-3">
   <ref id="minimal"/>
   <mod name="interrupt-nvic-demo-3"/>
 </prj>

 <prj name="interrupt-nvic-demo-4">
   <ref id="minimal"/>
   <mod name="interrupt-nvic-demo-4"/>
 </prj>

 <prj name="interrupt-nvic-demo-5">
   <ref id="minimal"/>
   <mod name="interrupt-nvic-demo-5"/>
 </prj>

 
 <prj name="interrupt-framework-demo">
  <ref id="minimal"/>
  <mod name="interrupt-framework-demo"/>
 </prj>

 <prj name="event-demo-1">
  <ref id="atomic"/>
  <mod name="event-demo-1"/>
 </prj>

 <prj name="event-demo-2">
  <ref id="atomic"/>
  <mod name="event-demo-2"/>
 </prj>

 <prj name="event-demo-3">
  <ref id="atomic"/>
  <mod name="event-demo-3"/>
 </prj>

 <prj name="event-framework-demo">
  <ref id="atomic"/>
  <mod name="event-framework-demo"/>
 </prj>
  
  
 <prj name="i2c-demo">
   <ref id="minimal"/>
   <mod name="i2c-demo"/>
 </prj>
 
 <prj name="i2c-app">
   <ref id="minimal"/>
   <mod name="i2c-app"/>
 </prj>

 <prj name="port-demo">
   <ref id="minimal"/>
   <mod name="port-demo"/>
 </prj>

 <prj name="port-framework-demo">
   <ref id="minimal"/>
   <mod name="port-framework-demo"/>
 </prj>

 <prj name="adc-event">
  <ref id="atomic"/>
  <mod name="adc-event"/>
 </prj>
 
 <makefile>
  <pre>

#---------------------------------- the locations
TOOLS=${_dp_HOME}/tools
TC=../tc/bin/arm-none-eabi-
CC=${TC}gcc
CXX=${TC}g++

AS=${TC}as
LD=${TC}ld
NM=${TC}nm
OBJCOPY=${TC}objcopy

LIBGCC_DIR:=$(dir $(shell ${CXX} --print-libgcc-file-name))
LIBGCC:= -L${LIBGCC_DIR} -lgcc
 
INTERFACE=
IMPLEMENTATION= 
#for more detailed include dependencies use
INTERFACE=extern const unsigned name __attribute__((used))=0;
IMPLEMENTATION=extern const unsigned name; static const unsigned _##name=name;


#------------------------------- rules
%.o:	%.S;${CXX} ${CXXFLAGS} -c -o${@} ${&lt;}

#------------------------------- flags
CPPFLAGS= \
 -include "sys/sys.h"\
 $(foreach d,$(_dp_SRC_DIRS),-I $(d)) \
 -DEARLY_INIT \
 -DNO_LONG_DIV \
 -DNO_FLOATS \
 -DSYS_SYS_SHOW_STARTUP \
 -D'INTERFACE(name,info)=' \
 -D'IMPLEMENTATION(name,info)='

CFLAGS=-O2 -std=c++14 -mcpu='cortex-m0' -mthumb \
         -fomit-frame-pointer\
	 -fpermissive \
	 -fcheck-new \
	 -fsized-deallocation \
         -fno-exceptions \
	 -fno-use-cxa-atexit \
	 -nostdinc\
	 -fno-builtin\
	 -Wreturn-type\
	 -fno-rtti\
	 -Wall\
	 -fno-unwind-tables \


# -Werror\

#--------------------
# call make with ACTION=${GRAPH} for generating dependency graph
#make app ACTION=GRAPH
ACTION?=LINK
CXXFLAGS=${CFLAGS}

SHOW_NM=@${NM} ${^}
SHOW_INIT_SEQUENCE=${NM} ${^} | ${_dp_HOME}/posix/bin/early-initialize.sh


INIT_SEQU=${NM} ${^} | \
	${TOOLS}/early-init.py init 

INIT_SEQUENCE=${NM} ${^} | \
	${TOOLS}/early-init.py init | \
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c -x c++ -o init-sequence.o -

LINK=${INIT_SEQUENCE} &amp;&amp; \
	${LD} -o ${@} init-sequence.o ${^}  \
	-Map=$@.map \
	--build-id \
	--script=../config/layout.ld \
	${LIBGCC} \
	 &amp;&amp; \
	${OBJCOPY} -O binary ${@} ${@}.bin

#use GRAPH for creating a dependency graph
GRAPH=@${NM}  ${^} | \
 ${TOOLS}/early-init.py graph  | dot -Tpdf > ${@}.pdf

  </pre>

  <post>
.PHONY: makefile
makefile:
	../tools/makefile.sh  
files:
	@java -jar ${TOOLS}/projects.jar files ${_dp_PROJECTS_XML} ${_dp_HOME} | sort
all:	${_dp_PRJ_LIST}
clean:	
	rm -f ${_dp_MOD_LIST} ${_dp_PRJ_LIST}
namespace:
	mkdir -p ${_dp_NAMESPACE}

#general rules
# all depends on sys/sys.h
${_dp_MOD_LIST}: sys/sys.h
  </post>
 </makefile>

</projects>
